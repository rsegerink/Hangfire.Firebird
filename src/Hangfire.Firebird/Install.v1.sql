/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR HANGFIRE_COUNTER_GENERATOR;
SET GENERATOR HANGFIRE_COUNTER_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_HASH_GENERATOR;
SET GENERATOR HANGFIRE_HASH_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_JOBPARAMETER_GENERATOR;
SET GENERATOR HANGFIRE_JOBPARAMETER_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_JOBQUEUE_GENERATOR;
SET GENERATOR HANGFIRE_JOBQUEUE_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_JOB_GENERATOR;
SET GENERATOR HANGFIRE_JOB_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_LIST_GENERATOR;
SET GENERATOR HANGFIRE_LIST_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_SET_GENERATOR;
SET GENERATOR HANGFIRE_SET_GENERATOR TO 0;

CREATE GENERATOR HANGFIRE_STATE_GENERATOR;
SET GENERATOR HANGFIRE_STATE_GENERATOR TO 0;

/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/

CREATE TABLE "HANGFIRE.SCHEMA" (
    "VERSION"  INTEGER NOT NULL
);

CREATE TABLE "HANGFIRE.COUNTER" (
    ID           INTEGER NOT NULL,
    "KEY"        VARCHAR(100) CHARACTER SET UNICODE_FSS NOT NULL,
    "VALUE"      SMALLINT NOT NULL,
    EXPIREAT     TIMESTAMP
);

CREATE TABLE "HANGFIRE.HASH" (
    ID           INTEGER NOT NULL,
    "KEY"        VARCHAR(100) CHARACTER SET UNICODE_FSS NOT NULL,
    FIELD        VARCHAR(100) CHARACTER SET UNICODE_FSS NOT NULL,
    "VALUE"      BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET UNICODE_FSS,
    EXPIREAT     TIMESTAMP
);

CREATE TABLE "HANGFIRE.JOB" (
    ID              INTEGER NOT NULL,
    STATEID         INTEGER,
    STATENAME       VARCHAR(20) CHARACTER SET UNICODE_FSS,
    INVOCATIONDATA  BLOB SUB_TYPE 1 SEGMENT SIZE 16384 CHARACTER SET UNICODE_FSS NOT NULL,
    ARGUMENTS       BLOB SUB_TYPE 1 SEGMENT SIZE 16384 CHARACTER SET UNICODE_FSS NOT NULL,
    CREATEDAT       TIMESTAMP NOT NULL,
    EXPIREAT        TIMESTAMP
);

CREATE TABLE "HANGFIRE.JOBPARAMETER" (
    ID           INTEGER NOT NULL,
    JOBID        INTEGER NOT NULL,
    NAME         VARCHAR(40) CHARACTER SET UNICODE_FSS NOT NULL,
    "VALUE"      BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET UNICODE_FSS
);

CREATE TABLE "HANGFIRE.JOBQUEUE" (
    ID           INTEGER NOT NULL,
    JOBID        INTEGER NOT NULL,
    QUEUE        VARCHAR(20) CHARACTER SET UNICODE_FSS NOT NULL,
    FETCHEDAT    TIMESTAMP
);

CREATE TABLE "HANGFIRE.LIST" (
    ID        INTEGER NOT NULL,
    "KEY"     VARCHAR(100) CHARACTER SET UNICODE_FSS NOT NULL,
    "VALUE"   BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET UNICODE_FSS,
    EXPIREAT  TIMESTAMP,
	REMOVE    SMALLINT
);

CREATE TABLE "HANGFIRE.LOCK" (
    RESOURCE     VARCHAR(100) NOT NULL,
    UPDATECOUNT  INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE "HANGFIRE.SERVER" (
    ID             VARCHAR(100) CHARACTER SET UNICODE_FSS NOT NULL,
    DATA           BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET UNICODE_FSS,
    LASTHEARTBEAT  TIMESTAMP NOT NULL
);

CREATE TABLE "HANGFIRE.SET" (
    ID           INTEGER NOT NULL,
    "KEY"        VARCHAR(100) CHARACTER SET UNICODE_FSS NOT NULL,
    SCORE        FLOAT NOT NULL,
    "VALUE"      VARCHAR(256) CHARACTER SET UNICODE_FSS NOT NULL,
    EXPIREAT     TIMESTAMP
);

CREATE TABLE "HANGFIRE.STATE" (
    ID           INTEGER NOT NULL,
    JOBID        INTEGER NOT NULL,
    NAME         VARCHAR(20) CHARACTER SET UNICODE_FSS NOT NULL,
    REASON       VARCHAR(100) CHARACTER SET UNICODE_FSS,
    CREATEDAT    TIMESTAMP NOT NULL,
    DATA         BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET UNICODE_FSS
);

/******************************************************************************/
/*                                Primary Keys                                */
/******************************************************************************/

ALTER TABLE "HANGFIRE.SCHEMA" ADD CONSTRAINT "PK_HANGFIRE.SCHEMA" PRIMARY KEY ("VERSION");
ALTER TABLE "HANGFIRE.COUNTER" ADD CONSTRAINT "PK_HANGFIRE.COUNTER" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.HASH" ADD CONSTRAINT "PK_HANGFIRE.HASH" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.JOB" ADD CONSTRAINT "PK_HANGFIRE.JOB" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.JOBPARAMETER" ADD CONSTRAINT "PK_HANGFIRE.JOBPARAMETER" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.JOBQUEUE" ADD CONSTRAINT "PK_HANGFIRE.JOBQUEUE" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.LIST" ADD CONSTRAINT "PK_HANGFIRE.LIST" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.SERVER" ADD CONSTRAINT "PK_HANGFIRE.SERVER" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.SET" ADD CONSTRAINT "PK_HANGFIRE.SET" PRIMARY KEY (ID);
ALTER TABLE "HANGFIRE.STATE" ADD CONSTRAINT "PK_HANGFIRE.STATE" PRIMARY KEY (ID);


/******************************************************************************/
/*                                Foreign Keys                                */
/******************************************************************************/

ALTER TABLE "HANGFIRE.JOBPARAMETER" ADD CONSTRAINT FK_HANGFIRE_JOBPARAMETER_JOB FOREIGN KEY (JOBID) REFERENCES "HANGFIRE.JOB" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE "HANGFIRE.STATE" ADD CONSTRAINT FK_HANGFIRE_STATE_JOB FOREIGN KEY (JOBID) REFERENCES "HANGFIRE.JOB" (ID) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE INDEX IX_HANFIRE_COUNTER_KEY ON "HANGFIRE.COUNTER" ("KEY");
CREATE UNIQUE INDEX UX_HANGFIRE_HASH_KEY_FIELD ON "HANGFIRE.HASH" ("KEY", FIELD);
CREATE INDEX IX_HANGFIRE_JOB_STATENAME ON "HANGFIRE.JOB" (STATENAME);
CREATE INDEX IX_HANGFIRE_JOBPARAMETER_JOBIDA ON "HANGFIRE.JOBPARAMETER" (JOBID, NAME);
CREATE INDEX IX_HANGFIRE_JOBQUEUE_QUEUEANDFE ON "HANGFIRE.JOBQUEUE" (QUEUE, FETCHEDAT);
CREATE UNIQUE INDEX UX_HANGFIRE_LOCK_RESOURCE ON "HANGFIRE.LOCK" (RESOURCE);
CREATE UNIQUE INDEX UX_HANGFIRE_SET_KEYANDVALUE ON "HANGFIRE.SET" ("KEY", "VALUE");


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: HANGFIRE_COUNTER_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_COUNTER_BEFORE_TRIGGER FOR "HANGFIRE.COUNTER"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_counter_generator, 1);
end
^


/* Trigger: HANGFIRE_HASH_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_HASH_BEFORE_TRIGGER FOR "HANGFIRE.HASH"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_hash_generator, 1);
end
^


/* Trigger: HANGFIRE_JOBPARA_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_JOBPARA_BEFORE_TRIGGER FOR "HANGFIRE.JOBPARAMETER"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_jobparameter_generator, 1);
end
^


/* Trigger: HANGFIRE_JOBQUEU_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_JOBQUEU_BEFORE_TRIGGER FOR "HANGFIRE.JOBQUEUE"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_jobqueue_generator, 1);
end
^


/* Trigger: HANGFIRE_JOB_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_JOB_BEFORE_TRIGGER FOR "HANGFIRE.JOB"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_job_generator, 1);
end
^


/* Trigger: HANGFIRE_LIST_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_LIST_BEFORE_TRIGGER FOR "HANGFIRE.LIST"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_list_generator, 1);
end
^


/* Trigger: HANGFIRE_SET_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_SET_BEFORE_TRIGGER FOR "HANGFIRE.SET"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_set_generator, 1);
end
^


/* Trigger: HANGFIRE_STATE_BEFORE_TRIGGER */
CREATE TRIGGER HANGFIRE_STATE_BEFORE_TRIGGER FOR "HANGFIRE.STATE"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = gen_id(hangfire_state_generator, 1);
end
^

SET TERM ; ^

